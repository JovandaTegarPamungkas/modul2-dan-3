import 'dart:math';
import 'dart:io';

// Generate random list of numbers
List<int> generateRandomList(int size) {
  Random random = Random();
  return List.generate(size, (_) => random.nextInt(1000000));
}

// Insertion Sort
void insertionSort(List<int> list) {
  for (int i = 1; i < list.length; i++) {
    int key = list[i];
    int j = i - 1;
    while (j >= 0 && list[j] > key) {
      list[j + 1] = list[j];
      j--;
    }
    list[j + 1] = key;
  }
}

// Selection Sort
void selectionSort(List<int> list) {
  for (int i = 0; i < list.length - 1; i++) {
    int minIndex = i;
    for (int j = i + 1; j < list.length; j++) {
      if (list[j] < list[minIndex]) {
        minIndex = j;
      }
    }
    int temp = list[i];
    list[i] = list[minIndex];
    list[minIndex] = temp;
  }
}

// Bubble Sort
void bubbleSort(List<int> list) {
  for (int i = 0; i < list.length - 1; i++) {
    for (int j = 0; j < list.length - i - 1; j++) {
      if (list[j] > list[j + 1]) {
        int temp = list[j];
        list[j] = list[j + 1];
        list[j + 1] = temp;
      }
    }
  }
}

// Shell Sort
void shellSort(List<int> list) {
  int n = list.length;
  for (int gap = n ~/ 2; gap > 0; gap ~/= 2) {
    for (int i = gap; i < n; i++) {
      int temp = list[i];
      int j;
      for (j = i; j >= gap && list[j - gap] > temp; j -= gap) {
        list[j] = list[j - gap];
      }
      list[j] = temp;
    }
  }
}

// Quick Sort
void quickSort(List<int> list, int low, int high) {
  if (low < high) {
    int pi = partition(list, low, high);
    quickSort(list, low, pi - 1);
    quickSort(list, pi + 1, high);
  }
}

int partition(List<int> list, int low, int high) {
  int pivot = list[high];
  int i = low - 1;
  for (int j = low; j < high; j++) {
    if (list[j] < pivot) {
      i++;
      int temp = list[i];
      list[i] = list[j];
      list[j] = temp;
    }
  }
  int temp = list[i + 1];
  list[i + 1] = list[high];
  list[high] = temp;
  return i + 1;
}

// Merge Sort
void mergeSort(List<int> list) {
  if (list.length <= 1) return;
  int mid = list.length ~/ 2;
  List<int> left = list.sublist(0, mid);
  List<int> right = list.sublist(mid);
  mergeSort(left);
  mergeSort(right);
  merge(list, left, right);
}

void merge(List<int> list, List<int> left, List<int> right) {
  int i = 0, j = 0, k = 0;
  while (i < left.length && j < right.length) {
    if (left[i] < right[j]) {
      list[k++] = left[i++];
    } else {
      list[k++] = right[j++];
    }
  }
  while (i < left.length) list[k++] = left[i++];
  while (j < right.length) list[k++] = right[j++];
}

void measureSortingTime() {
  List<int> sizes = [50000, 100000, 150000, 200000, 250000, 300000, 350000, 400000, 450000, 500000];
  print("Jumlah Data | Insertion | Selection | Bubble | Shell | Quick | Merge");
  for (var size in sizes) {
    List<int> data = generateRandomList(size);
    print("$size | ");
    
    List<int> temp;
    Stopwatch stopwatch;
    
    temp = List.from(data);
    stopwatch = Stopwatch()..start();
    insertionSort(temp);
    stopwatch.stop();
    stdout.write(" ${stopwatch.elapsedMilliseconds} ms | ");
    
    temp = List.from(data);
    stopwatch = Stopwatch()..start();
    selectionSort(temp);
    stopwatch.stop();
    stdout.write(" ${stopwatch.elapsedMilliseconds} ms | ");
    
    temp = List.from(data);
    stopwatch = Stopwatch()..start();
    bubbleSort(temp);
    stopwatch.stop();
    stdout.write(" ${stopwatch.elapsedMilliseconds} ms | ");
    
    temp = List.from(data);
    stopwatch = Stopwatch()..start();
    shellSort(temp);
    stopwatch.stop();
    stdout.write(" ${stopwatch.elapsedMilliseconds} ms | ");
    
    temp = List.from(data);
    stopwatch = Stopwatch()..start();
    quickSort(temp, 0, temp.length - 1);
    stopwatch.stop();
    stdout.write(" ${stopwatch.elapsedMilliseconds} ms | ");
    
    temp = List.from(data);
    stopwatch = Stopwatch()..start();
    mergeSort(temp);
    stopwatch.stop();
    stdout.write(" ${stopwatch.elapsedMilliseconds} ms\n");
  }
}

void main() {
  measureSortingTime();
}
